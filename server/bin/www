#!/usr/bin/env node

/* Sets up the environment variables from your .env file*/
require("dotenv").config();

/**
 * Module dependencies.
 */

var app = require("../app");
var http = require("http");
const {saveMessageToConversation} = require('../util/socket_db');
const {languages, languages_codes, getFriendLanguageCodes, code_to_language} = require('../util/languages');
const {getTranslation} = require('../util/translate_helpers');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || "3001");
app.set("port", port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
const io = require('socket.io')(server);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on("error", onError);
server.on("listening", onListening);

const nsp = io.of('/chat');
nsp.on('connection', function(socket){
  console.log('someone connected on /chat');

  socket.on('message', (data) => {
    let {conversationId, message} = data;
    const chatLanguages = languages[conversationId];
    let friendLanguageCodes = [];

    //save initial message
    //saveMessageToConversation({message, conversationId})

    //get friend language; probably want to get the language from FE contact data
    friendLanguageCodes = getFriendLanguageCodes(chatLanguages, message.language);

    //make api call to translate message
    friendLanguageCodes.forEach(code => {
      let curTranslation;
      getTranslation(message.original_message, code)
        .then(translations => {
          let translationObj = {};
          let language = code_to_language[code];
          //update data object with translated message
          message.translations = {...message.translations, [language]: translations[0]};
          socket.broadcast.emit(conversationId, data);
          //save translated message
          saveMessageToConversation({message, conversationId})
        })
        .catch(err => console.error('Translation API error', err))
    })



  });

  socket.on("disconnect", () => {
    console.log("user disconnected");
  });
});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;

  console.log("Listening on " + bind);
}
