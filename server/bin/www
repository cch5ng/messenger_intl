#!/usr/bin/env node

/* Sets up the environment variables from your .env file*/
require("dotenv").config();

/**
 * Module dependencies.
 */

var app = require("../app");
var http = require("http");
const {saveMessageToConversation} = require('../util/socket_db');
const {language_codes} = require('../util/languages');
const {getTranslation} = require('../util/translate_helpers');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || "3001");
app.set("port", port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
const io = require('socket.io')(server);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on("error", onError);
server.on("listening", onListening);

const nsp = io.of('/chat');
nsp.on('connection', function(socket){
  console.log('someone connected on /chat');

  socket.on('room', (data) => {
    console.log('room data', data);
  })

  socket.on('message', (data) => {
    if (data.action === 'group conversation init') {
      console.log('gets to server group conversation init')
      console.log('from_email', data.from_email)
      let target_emails = user_emails.filter(email => email !== from_email);
      console.log('target_emails', target_emails)
      //emit on userId events, the same data
      //socket.broadcast(userId, data);
      //socket.broadcast.emit(conversationId, data);
    } else if (data.action === 'message') {
      let {conversationId, message, userEmails, friendLanguages} = data;
      let friendLanguageCodes = friendLanguages.map(lang => language_codes[lang]);
  
      friendLanguageCodes.forEach((code, idx) => {
        getTranslation(message.original_message, code)
          .then(translations => {
            let language = friendLanguages[idx];
            message.translations = {...message.translations, [language]: translations[0]};
            if (idx === friendLanguages.length - 1) {
              const updated_on = Date.now();
              socket.broadcast.emit(conversationId, data);
              saveMessageToConversation({message, updated_on, conversationId});
            }
          })
          .catch(err => {
            //save untranslated message
            saveMessageToConversation({message, conversationId});
            console.error('Translation API error', err);
          })
      })  
    }
  });

  socket.on("disconnect", () => {
    console.log("user disconnected");
  });
});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;

  console.log("Listening on " + bind);
}
